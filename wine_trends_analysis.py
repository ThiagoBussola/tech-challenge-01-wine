import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import warnings
warnings.filterwarnings('ignore')

class WineTrendsAnalyzer:
    def __init__(self):
        self.wine_data = None
        self.brazilian_wines = None
        
    def load_data(self):
        """Carrega dados de avalia√ß√µes de vinhos"""
        try:
            self.wine_data = pd.read_csv('raw-data/winemag-data-130k-v2.csv')
            print(f"‚úÖ Dataset carregado: {len(self.wine_data):,} avalia√ß√µes de vinhos")
            
            # Filtrar vinhos brasileiros
            self.brazilian_wines = self.wine_data[self.wine_data['country'] == 'Brazil'].copy()
            print(f"üáßüá∑ Vinhos brasileiros encontrados: {len(self.brazilian_wines)}")
            
            # Limpar dados
            self.clean_data()
            return True
        except Exception as e:
            print(f"‚ùå Erro ao carregar dados: {e}")
            return False
    
    def clean_data(self):
        """Limpa e prepara os dados para an√°lise"""
        # Remover valores nulos em colunas importantes
        self.wine_data = self.wine_data.dropna(subset=['points', 'price'])
        
        # Filtrar pre√ßos extremos (outliers)
        Q1 = self.wine_data['price'].quantile(0.25)
        Q3 = self.wine_data['price'].quantile(0.75)
        IQR = Q3 - Q1
        lower_bound = Q1 - 1.5 * IQR
        upper_bound = Q3 + 1.5 * IQR
        
        self.wine_data = self.wine_data[
            (self.wine_data['price'] >= lower_bound) & 
            (self.wine_data['price'] <= upper_bound)
        ]
        
        # Criar categorias de pre√ßo
        self.wine_data['price_category'] = pd.cut(
            self.wine_data['price'], 
            bins=[0, 15, 30, 50, 100, float('inf')],
            labels=['Econ√¥mico (<$15)', 'M√©dio ($15-30)', 'Premium ($30-50)', 
                   'Super Premium ($50-100)', 'Ultra Premium (>$100)']
        )
        
        # Criar categorias de pontua√ß√£o
        self.wine_data['rating_category'] = pd.cut(
            self.wine_data['points'],
            bins=[0, 82, 87, 90, 95, 100],
            labels=['Aceit√°vel (80-82)', 'Bom (83-87)', 'Muito Bom (88-90)', 
                   'Excelente (91-95)', 'Excepcional (96-100)']
        )
        
        print(f"üìä Dados limpos: {len(self.wine_data):,} registros v√°lidos")
    
    def analyze_price_quality_relationship(self):
        """Analisa rela√ß√£o entre pre√ßo e qualidade"""
        print("\n" + "="*60)
        print("AN√ÅLISE: RELA√á√ÉO PRE√áO vs QUALIDADE")
        print("="*60)
        
        # Correla√ß√£o pre√ßo-pontua√ß√£o
        correlation = self.wine_data['price'].corr(self.wine_data['points'])
        print(f"üìà Correla√ß√£o Pre√ßo-Pontua√ß√£o: {correlation:.3f}")
        
        # An√°lise por categoria de pre√ßo
        price_analysis = self.wine_data.groupby('price_category').agg({
            'points': ['mean', 'std', 'count'],
            'price': ['mean', 'median']
        }).round(2)
        
        print("\nüìä ESTAT√çSTICAS POR CATEGORIA DE PRE√áO:")
        print(price_analysis)
        
        # Criar visualiza√ß√£o
        fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(16, 12))
        
        # Scatter plot pre√ßo vs pontua√ß√£o
        ax1.scatter(self.wine_data['price'], self.wine_data['points'], 
                   alpha=0.5, s=20, color='darkred')
        ax1.set_xlabel('Pre√ßo (US$)')
        ax1.set_ylabel('Pontua√ß√£o')
        ax1.set_title('Rela√ß√£o Pre√ßo vs Pontua√ß√£o')
        ax1.grid(True, alpha=0.3)
        
        # Box plot pontua√ß√£o por categoria de pre√ßo
        self.wine_data.boxplot(column='points', by='price_category', ax=ax2)
        ax2.set_title('Distribui√ß√£o de Pontua√ß√µes por Categoria de Pre√ßo')
        ax2.set_xlabel('Categoria de Pre√ßo')
        ax2.set_ylabel('Pontua√ß√£o')
        plt.setp(ax2.xaxis.get_majorticklabels(), rotation=45)
        
        # Histograma de pre√ßos
        ax3.hist(self.wine_data['price'], bins=50, color='skyblue', alpha=0.7, edgecolor='black')
        ax3.set_xlabel('Pre√ßo (US$)')
        ax3.set_ylabel('Frequ√™ncia')
        ax3.set_title('Distribui√ß√£o de Pre√ßos')
        ax3.grid(True, alpha=0.3)
        
        # M√©dia de pontua√ß√£o por categoria de pre√ßo
        avg_points = self.wine_data.groupby('price_category')['points'].mean()
        bars = ax4.bar(range(len(avg_points)), avg_points.values, 
                      color=plt.cm.RdYlBu_r(np.linspace(0, 1, len(avg_points))))
        ax4.set_xlabel('Categoria de Pre√ßo')
        ax4.set_ylabel('Pontua√ß√£o M√©dia')
        ax4.set_title('Pontua√ß√£o M√©dia por Categoria de Pre√ßo')
        ax4.set_xticks(range(len(avg_points)))
        ax4.set_xticklabels(avg_points.index, rotation=45)
        
        # Adicionar valores nas barras
        for bar, value in zip(bars, avg_points.values):
            ax4.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.1, 
                    f'{value:.1f}', ha='center', va='bottom')
        
        plt.tight_layout()
        plt.savefig('analise_preco_qualidade.png', dpi=300, bbox_inches='tight')
        plt.show()
        
        return correlation, price_analysis
    
    def analyze_variety_trends(self):
        """Analisa tend√™ncias por variedade de uva"""
        print("\n" + "="*60)
        print("AN√ÅLISE: TEND√äNCIAS POR VARIEDADE DE UVA")
        print("="*60)
        
        # Top variedades por volume
        top_varieties = self.wine_data['variety'].value_counts().head(15)
        print("\nüçá TOP 15 VARIEDADES MAIS AVALIADAS:")
        for i, (variety, count) in enumerate(top_varieties.items(), 1):
            print(f"{i:2d}. {variety}: {count:,} avalia√ß√µes")
        
        # An√°lise de pre√ßo e qualidade por variedade
        variety_analysis = self.wine_data[self.wine_data['variety'].isin(top_varieties.index)].groupby('variety').agg({
            'points': ['mean', 'std'],
            'price': ['mean', 'median'],
            'variety': 'count'
        }).round(2)
        
        variety_analysis.columns = ['Pontua√ß√£o_M√©dia', 'Pontua√ß√£o_Desvio', 
                                   'Pre√ßo_M√©dio', 'Pre√ßo_Mediano', 'Quantidade']
        
        # Calcular valor por ponto (custo-benef√≠cio)
        variety_analysis['Custo_Benef√≠cio'] = (variety_analysis['Pre√ßo_M√©dio'] / 
                                              variety_analysis['Pontua√ß√£o_M√©dia']).round(3)
        
        variety_analysis = variety_analysis.sort_values('Custo_Benef√≠cio')
        
        print("\nüí∞ RANKING DE CUSTO-BENEF√çCIO (menor = melhor):")
        print(variety_analysis[['Pontua√ß√£o_M√©dia', 'Pre√ßo_M√©dio', 'Custo_Benef√≠cio']].head(10))
        
        # Visualiza√ß√£o
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 8))
        
        # Top variedades por volume
        top_10_varieties = top_varieties.head(10)
        bars1 = ax1.barh(range(len(top_10_varieties)), top_10_varieties.values,
                        color=plt.cm.Set3(np.linspace(0, 1, len(top_10_varieties))))
        ax1.set_xlabel('N√∫mero de Avalia√ß√µes')
        ax1.set_title('Top 10 Variedades Mais Avaliadas')
        ax1.set_yticks(range(len(top_10_varieties)))
        ax1.set_yticklabels(top_10_varieties.index)
        
        # Custo-benef√≠cio
        best_value = variety_analysis.head(10)
        bars2 = ax2.bar(range(len(best_value)), best_value['Custo_Benef√≠cio'],
                       color=plt.cm.RdYlGn_r(np.linspace(0, 1, len(best_value))))
        ax2.set_xlabel('Variedade')
        ax2.set_ylabel('Custo-Benef√≠cio (Pre√ßo/Pontua√ß√£o)')
        ax2.set_title('Top 10 Variedades com Melhor Custo-Benef√≠cio')
        ax2.set_xticks(range(len(best_value)))
        ax2.set_xticklabels(best_value.index, rotation=45, ha='right')
        
        plt.tight_layout()
        plt.savefig('analise_variedades.png', dpi=300, bbox_inches='tight')
        plt.show()
        
        return variety_analysis
    
    def analyze_regional_preferences(self):
        """Analisa prefer√™ncias regionais"""
        print("\n" + "="*60)
        print("AN√ÅLISE: PREFER√äNCIAS REGIONAIS")
        print("="*60)
        
        # Top pa√≠ses produtores
        top_countries = self.wine_data['country'].value_counts().head(15)
        print("\nüåç TOP 15 PA√çSES PRODUTORES:")
        for i, (country, count) in enumerate(top_countries.items(), 1):
            print(f"{i:2d}. {country}: {count:,} vinhos")
        
        # An√°lise por pa√≠s
        country_analysis = self.wine_data[self.wine_data['country'].isin(top_countries.index)].groupby('country').agg({
            'points': ['mean', 'std'],
            'price': ['mean', 'median'],
            'country': 'count'
        }).round(2)
        
        country_analysis.columns = ['Pontua√ß√£o_M√©dia', 'Pontua√ß√£o_Desvio', 
                                   'Pre√ßo_M√©dio', 'Pre√ßo_Mediano', 'Quantidade']
        
        country_analysis = country_analysis.sort_values('Pontua√ß√£o_M√©dia', ascending=False)
        
        print("\nüèÜ TOP 10 PA√çSES POR QUALIDADE M√âDIA:")
        print(country_analysis[['Pontua√ß√£o_M√©dia', 'Pre√ßo_M√©dio', 'Quantidade']].head(10))
        
        # Posi√ß√£o do Brasil
        if 'Brazil' in country_analysis.index:
            brazil_rank = list(country_analysis.index).index('Brazil') + 1
            brazil_stats = country_analysis.loc['Brazil']
            print(f"\nüáßüá∑ POSI√á√ÉO DO BRASIL:")
            print(f"Ranking: {brazil_rank}¬∫ lugar")
            print(f"Pontua√ß√£o m√©dia: {brazil_stats['Pontua√ß√£o_M√©dia']:.1f}")
            print(f"Pre√ßo m√©dio: US$ {brazil_stats['Pre√ßo_M√©dio']:.2f}")
            print(f"Quantidade de vinhos: {int(brazil_stats['Quantidade'])}")
        
        return country_analysis
    
    def identify_purchase_trends(self):
        """Identifica tend√™ncias espec√≠ficas de compra"""
        print("\n" + "="*60)
        print("TEND√äNCIAS DE COMPRA IDENTIFICADAS")
        print("="*60)
        
        # 1. Sweet Spot de pre√ßo-qualidade
        sweet_spot = self.wine_data[
            (self.wine_data['points'] >= 88) & 
            (self.wine_data['price'] <= 30)
        ]
        
        print(f"\nüéØ SWEET SPOT (Pontua√ß√£o ‚â•88, Pre√ßo ‚â§$30):")
        print(f"Quantidade de vinhos: {len(sweet_spot):,}")
        print(f"Percentual do total: {len(sweet_spot)/len(self.wine_data)*100:.1f}%")
        
        if len(sweet_spot) > 0:
            print(f"Pontua√ß√£o m√©dia: {sweet_spot['points'].mean():.1f}")
            print(f"Pre√ßo m√©dio: US$ {sweet_spot['price'].mean():.2f}")
            
            sweet_spot_varieties = sweet_spot['variety'].value_counts().head(5)
            print("\nTop 5 variedades no sweet spot:")
            for variety, count in sweet_spot_varieties.items():
                print(f"  ‚Ä¢ {variety}: {count} vinhos")
        
        # 2. Vinhos premium com melhor custo-benef√≠cio
        premium_wines = self.wine_data[self.wine_data['points'] >= 90]
        premium_value = premium_wines.copy()
        premium_value['value_score'] = premium_value['points'] / premium_value['price']
        best_premium = premium_value.nlargest(10, 'value_score')
        
        print(f"\nüíé VINHOS PREMIUM COM MELHOR CUSTO-BENEF√çCIO (Pontua√ß√£o ‚â•90):")
        for idx, wine in best_premium.iterrows():
            print(f"  ‚Ä¢ {wine['title'][:50]}...")
            print(f"    Pontua√ß√£o: {wine['points']}, Pre√ßo: US$ {wine['price']:.2f}, Valor: {wine['value_score']:.3f}")
        
        # 3. Tend√™ncias por faixa de pre√ßo
        print(f"\nüìä DISTRIBUI√á√ÉO POR CATEGORIA DE PRE√áO:")
        price_dist = self.wine_data['price_category'].value_counts()
        for category, count in price_dist.items():
            percentage = count / len(self.wine_data) * 100
            print(f"  ‚Ä¢ {category}: {count:,} vinhos ({percentage:.1f}%)")
        
        # 4. Correla√ß√µes interessantes
        print(f"\nüîç CORRELA√á√ïES DESCOBERTAS:")
        
        # Correla√ß√£o pontua√ß√£o-pre√ßo por pa√≠s
        correlations = []
        for country in self.wine_data['country'].value_counts().head(10).index:
            country_data = self.wine_data[self.wine_data['country'] == country]
            if len(country_data) > 50:  # M√≠nimo de dados para correla√ß√£o confi√°vel
                corr = country_data['price'].corr(country_data['points'])
                correlations.append((country, corr, len(country_data)))
        
        correlations.sort(key=lambda x: x[1], reverse=True)
        
        print("\nCorrela√ß√£o Pre√ßo-Qualidade por pa√≠s:")
        for country, corr, count in correlations[:5]:
            print(f"  ‚Ä¢ {country}: {corr:.3f} ({count} vinhos)")
        
        return {
            'sweet_spot': sweet_spot,
            'best_premium': best_premium,
            'price_distribution': price_dist,
            'country_correlations': correlations
        }
    
    def generate_recommendations(self, trends_data):
        """Gera recomenda√ß√µes baseadas nas tend√™ncias"""
        print("\n" + "="*60)
        print("RECOMENDA√á√ïES ESTRAT√âGICAS")
        print("="*60)
        
        print("\nüéØ PARA CONSUMIDORES:")
        print("1. MELHOR CUSTO-BENEF√çCIO: Procure vinhos na faixa de $15-30 com pontua√ß√£o ‚â•88")
        print("2. VARIEDADES RECOMENDADAS: Pinot Noir, Chardonnay e Cabernet Sauvignon oferecem boa rela√ß√£o qualidade-pre√ßo")
        print("3. PA√çSES EMERGENTES: Considere vinhos de pa√≠ses como Portugal e Argentina para descobrir valores")
        print("4. SWEET SPOT: Vinhos entre $20-25 frequentemente oferecem excelente qualidade")
        
        print("\nüè≠ PARA PRODUTORES BRASILEIROS:")
        print("1. POSICIONAMENTO: Focar na faixa premium ($30-50) com alta qualidade")
        print("2. VARIEDADES: Investir em variedades com boa aceita√ß√£o internacional")
        print("3. MARKETING: Destacar terroir √∫nico e sustentabilidade")
        print("4. PRE√áO: Manter competitividade na faixa de $15-30 para ganhar mercado")
        
        print("\nüìà PARA INVESTIDORES:")
        print("1. MERCADO CRESCENTE: Segmento premium mostra forte correla√ß√£o pre√ßo-qualidade")
        print("2. OPORTUNIDADE: Vinhos brasileiros t√™m potencial de valoriza√ß√£o")
        print("3. DIVERSIFICA√á√ÉO: Investir em diferentes regi√µes e variedades")
        print("4. SUSTENTABILIDADE: Vinhos org√¢nicos e biodin√¢micos s√£o tend√™ncia")
    
    def run_complete_analysis(self):
        """Executa an√°lise completa"""
        print("üç∑ AN√ÅLISE COMPLETA DE TEND√äNCIAS DE COMPRA DE VINHOS")
        print("=" * 70)
        
        if not self.load_data():
            return
        
        # Executar todas as an√°lises
        correlation, price_analysis = self.analyze_price_quality_relationship()
        variety_analysis = self.analyze_variety_trends()
        country_analysis = self.analyze_regional_preferences()
        trends_data = self.identify_purchase_trends()
        self.generate_recommendations(trends_data)
        
        print("\n" + "="*70)
        print("‚úÖ AN√ÅLISE CONCLU√çDA! Gr√°ficos salvos como PNG.")
        print("="*70)
        
        return {
            'correlation': correlation,
            'price_analysis': price_analysis,
            'variety_analysis': variety_analysis,
            'country_analysis': country_analysis,
            'trends_data': trends_data
        }

# Executar an√°lise
if __name__ == "__main__":
    analyzer = WineTrendsAnalyzer()
    results = analyzer.run_complete_analysis()